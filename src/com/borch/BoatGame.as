/** * Created by Bradley Borch * Activa Digital Media Design * http://www.activadesign.com * Date: 12/1/11 * Time: 1:24 PM */package com.borch {	import com.greensock.*;	import com.greensock.easing.Sine;	import flash.display.MovieClip;	import flash.events.AccelerometerEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.sensors.Accelerometer;	public class BoatGame extends MovieClip implements IGame {		private var rockRate:int;		private static const ROCK_RATES:Array = [6, 16];		private var startRate:int = ROCK_RATES [0];		private var startY:Number;		private var endY:Number;		private var Boat:MovieClip;		private var accel:Accelerometer;		private var halfStageWidth:int;		public function BoatGame () {			super ();		}		public function initGame (resource:Object = null):void {			halfStageWidth = Math.round (stage.stageWidth / 2);			Boat = Rocker.Boat;			startY = Rocker.y;			endY = stage.stageHeight - (Rocker.height + Rocker.getBounds (Rocker).y);			makeLightning ();			if (Accelerometer.isSupported) {				accel = new Accelerometer ();				accel.setRequestedUpdateInterval (10);			}		}		public function resetGame (option:Object = null):void {			if (option) startRate = ROCK_RATES [option];			rockRate = startRate;			Rocker.rotation = Boat.rotation = 0;			Rocker.y = startY;			Game.Cursor.x = Game.Anchor.x = 0;			stopGame ();			TweenMax.delayedCall (2, startGame, [true]);		}		public function startGame (firstTime:Boolean = false):void {			if (accel) {				accel.addEventListener (AccelerometerEvent.UPDATE, setCursorWithMotion, false, 0, true);			} else {				stage.addEventListener (MouseEvent.MOUSE_DOWN, mouseDown, false, 0, true);				stage.addEventListener (MouseEvent.MOUSE_UP, mouseUp, false, 0, true);			}			addEventListener (Event.ENTER_FRAME, updateGame, false, 0, true);			rockBoat ();			if (firstTime) GameManager.instance.gameStarted ();		}		public function stopGame (gameOver:Object = false):void {			TweenMax.killTweensOf (Boat);			TweenMax.killTweensOf (Rocker);			if (accel) {				accel.removeEventListener (AccelerometerEvent.UPDATE, setCursorWithMotion);			} else {				stage.removeEventListener (MouseEvent.MOUSE_DOWN, mouseDown);				stage.removeEventListener (MouseEvent.MOUSE_UP, mouseUp);				stage.removeEventListener (MouseEvent.MOUSE_MOVE, setCursorWithMouseMove);			}			removeEventListener (Event.ENTER_FRAME, updateGame);			if (gameOver) GameManager.instance.gameFeedback ();		}		public function cleanUp ():void {			accel = null;			stopGame ();			TweenMax.killAll ();		}		private function rockBoat ():void {			TweenMax.to (Boat, .8 + Math.random () * .4, { rotation : -Math.random () * Util.sign (Boat.rotation) * ++rockRate, onComplete : rockBoat, ease : Sine.easeInOut});		}		private function mouseDown (event:MouseEvent):void {			stage.addEventListener (MouseEvent.MOUSE_MOVE, setCursorWithMouseMove, false, 0, true);		}		private function setCursorWithMouseMove (event:MouseEvent):void {			Game.Cursor.x = Util.inRange (Game.mouseX - halfStageWidth, -290, 290);		}		private function mouseUp (event:MouseEvent):void {			stage.removeEventListener (MouseEvent.MOUSE_MOVE, setCursorWithMouseMove);		}		private function setCursorWithMotion (a:AccelerometerEvent):void {			Game.Cursor.x = Util.inRange (Game.Cursor.x - a.accelerationX * 100, -290, 290);		}		private function updateGame (event:Event):void {			Rocker.rotation = -Game.Cursor.x / 5;			Game.Anchor.x = 5 * Boat.rotation;			Rocker.y += .2 * (Math.max (0, (Math.abs (Rocker.rotation + Boat.rotation) - 10)));			if ((Rocker.y - startY) >= 80) {				stopGame ();				TweenMax.to (Boat, 2, { rotation : 0 });				TweenMax.to (Rocker, 2, { rotation : 0, y : endY, onComplete : stopGame, onCompleteParams : [true] });			}		}		private function makeLightning ():void {			var Lightning:MovieClip = new LightningClip;			addChildAt (Lightning, 1);			Lightning.rotation = 15 * Math.random ();			Lightning.x = stage.stageWidth * Math.random ();			Lightning.scaleX = Util.neg ();			TweenMax.to (Lightning, .2, { scaleY : 2 * Math.random (), yoyo : true, repeat : 1, onComplete : Destroy.it, onCompleteParams : [Lightning] });			TweenMax.delayedCall (2 + 3 * Math.random (), makeLightning);		}	}}