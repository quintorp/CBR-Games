package com.borch {	import com.greensock.*;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	public class QuizGame extends MovieClip implements IGame {		private var gameXML:XML;		private var TheQuestion:MovieClip;		private var score:int = 0;		public function QuizGame () {			super ();		}		public function initGame (resource:Object = null):void {			gameXML = new XML (resource);			gameXML.length = gameXML.entry.length ();			score = 0;			XML.ignoreWhitespace = true;			addEventListener ('buttonClick', buttonClick, false, 0, true);		}		public function resetGame (option:Object = null):void {			for each (var used:XML in gameXML.used) used.setName ('entry');			for each (var current:XML in gameXML.current) current.setName ('entry');			stopGame ();			startGame (true);		}		public function startGame (firstTime:Boolean = false):void {			if (firstTime) {				GameManager.instance.gameStarted ();				getNextQuestion ();			}		}		public function stopGame (gameOver:Object = false):void {			if (gameOver) GameManager.instance.gameFeedback (CBRXML.the().xml.gamesXref.QuizGame.feedback1 + ' ' + score + ' ' + CBRXML.the().xml.gamesXref.QuizGame.feedback2 + ' ' + gameXML.length + ' ' + CBRXML.the().xml.gamesXref.QuizGame.feedback3 + ' ');		}		public function cleanUp ():void {			removeEventListener ('buttonClick', buttonClick);			stopGame ();			TweenMax.killAll ();		}		// ********* END IGame FUNCTIONS, START GAME FUNCTIONS *********		// ADD A NEW QUESTION		private function getNextQuestion ():void {			var OldQuestion:MovieClip = TheQuestion;			Destroy.it (OldQuestion, .7);			for each (var current:XML in gameXML.current) current.setName ('used');			if (!gameXML.entry.length ()) {				stopGame (true);				return;			}			// MAKE NEW QUESTION			gameXML.entry[Util.randomize (gameXML.entry.length ())].setName ('current');			TheQuestion = new MovieClip;			addChildAt (TheQuestion, 0);			TheQuestion.alpha = 0;			// BUILD THE QUESTION PART			var TheAsk:GameAsk = TheQuestion.addChild (new GameAsk);			TheAsk.theText.text = gameXML.current.question;			TheAsk.theNum.text = gameXML.used.length () + 1;// - gameXML.entry.length ();			TheAsk.theText.height = TheAsk.theText.textHeight + 5;			// BUILD THE ANSWER PART, UP TO 7 CHOICES + CORRECT ANSWER			var choiceCount:int = 1 + gameXML.current.choice.length ();			var answerKey:Array = Util.randArray (choiceCount);			while (answerKey.length) {				var nextKey:int = answerKey.pop ();				var NextAnswer:GameAnswer = TheQuestion.addChild (new GameAnswer);				NextAnswer.theNum.text = String.fromCharCode (96 + (choiceCount - answerKey.length));				if (nextKey) {					NextAnswer.theText.text = gameXML.current.choice[--nextKey];				} else {					NextAnswer.theText.text = gameXML.current.answer;					NextAnswer.isAnswer = true;				}				NextAnswer.theText.height = NextAnswer.theText.textHeight + 5;				NextAnswer.theText.y = NextAnswer.QuizBtn.y + (NextAnswer.QuizBtn.height - NextAnswer.theText.height) / 2;				NextAnswer.y = TheQuestion.height;//				Choice mouseEvent listeners				Util.asButton (NextAnswer);				NextAnswer.theText.mouseEnabled = false;				NextAnswer.addEventListener (MouseEvent.ROLL_OVER, checkItem, false, 0, true);				NextAnswer.addEventListener (MouseEvent.ROLL_OUT, checkItem, false, 0, true);				NextAnswer.addEventListener (MouseEvent.CLICK, checkItem, false, 0, true);			}			Center.it (TheQuestion, stage, 0, 0, -30);			TweenMax.to (TheQuestion, .7, { alpha : 1, delay : .5 });		}		//******** CHECK ANSWER ********		private function checkItem (e:MouseEvent):void {			if (e.type == 'click') {				var popupXML:XML = <popupXML></popupXML>;				popupXML.options = CBRXML.the().xml.buttonLables.Continue;				if (e.currentTarget.isAnswer) {					++score;					popupXML.body = CBRXML.the().xml.feedbackPos.choice [Util.randomize(CBRXML.the().xml.feedbackPos.choice.length())].toString() + ' ' + CBRXML.the().xml.quiz.correct;				} else {					popupXML.body = CBRXML.the().xml.feedbackNeg.choice [Util.randomize(CBRXML.the().xml.feedbackNeg.choice.length())].toString() + ' ' + CBRXML.the().xml.quiz.incorrect + ' "' + gameXML.current.answer + '"';				}				popupXML.options = CBRXML.the().xml.buttonLabels.Done.toString();				GameManager.instance.addChild (new GamePopup (popupXML));				dispatchEvent (new Event ('pauseTimer', true, true));			}			e.currentTarget.theText.textColor = (e.type == 'rollOver') ? 0xFFFFFF : 0x000000;		}		public function buttonClick (buttonEvent:Event):void {			getNextQuestion ();			buttonEvent.stopPropagation ();			dispatchEvent (new Event ('restartTimer', true, true));		}	}}