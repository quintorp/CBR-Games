package com.borch {	import com.greensock.*;	import com.greensock.easing.*;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.utils.getDefinitionByName;	public class CoatGame extends MovieClip implements IGame {		private var outPiece:GlowFilter = new GlowFilter (0x000000, 1, 4, 4, 4, 1, true, false);		private var Patch:MovieClip;		private var PatchClip:MovieClip;		private var Patches:Array = [];		private var Game:MovieClip;		private var easy0_diff1:int;		private var classes:Array = [JoeEasy, JoeHard, pattern0, pattern1, pattern2, pattern3, pattern4, pattern5, pattern6, pattern7, pattern8, pattern9, pattern10, pattern11, pattern12, pattern13, pattern14, pattern15];		public function CoatGame () {			super ();		}		public function initGame (resource:Object = null):void {		}		public function resetGame (option:Object = null):void {			if (option) easy0_diff1 = int (option);			Destroy.it (Game);			Game = MovieClip (new (getDefinitionByName ('Joe' + ['Easy', 'Hard'][easy0_diff1])));			addChild (Game);			// ** CYCLE THROUGH THE PIECES **			var NewPatch:MovieClip;			PatchClip = new MovieClip ();			Game.addChild (PatchClip);			var theKeys:Array = Util.randArray (16);			var i:int = Game.Working.numChildren - 1;			while (i--) {				// ** SETUP GOAL PIECE **				var pieceKey:int = theKeys [i];				NewPatch = MovieClip (new (getDefinitionByName ('pattern' + pieceKey)));				Game.addChild (NewPatch);				Center.it (NewPatch, Game.Goal.getChildAt (i));				NewPatch.mask = Game.Goal.getChildAt (i);				NewPatch = new MovieClip ();				PatchClip.addChild (NewPatch);				Center.it (NewPatch, Game.Working.getChildAt (i));				NewPatch.mask = Game.Working.getChildAt (i);				NewPatch.filters = [outPiece];				Patches.push (NewPatch);				NewPatch.target = pieceKey;				do {					NewPatch.keys = Util.randArray (16);				} while (NewPatch.keys[0] == NewPatch.target);				NewPatch.index = 15;				getNextPattern (NewPatch);			}			PatchClip.addEventListener (MouseEvent.MOUSE_DOWN, firstTime, false, 0, true);			stopGame ();			startGame (true);		}		private function firstTime (e:MouseEvent):void {			Game.Working.removeEventListener (MouseEvent.MOUSE_DOWN, firstTime);			GameManager.instance.gameStarted ();		}		public function startGame (firstTime:Boolean = false):void {			Util.asButton (PatchClip);			PatchClip.alpha = 1;			PatchClip.addEventListener (MouseEvent.MOUSE_OVER, hiliteOn, false, 0, true);			PatchClip.addEventListener (MouseEvent.MOUSE_OUT, hiliteOff, false, 0, true);			PatchClip.addEventListener (MouseEvent.CLICK, clickPiece, false, 0, true);		}		public function stopGame (gameOver:Object = false):void {			Util.asButton (PatchClip, false);			PatchClip.alpha = 1;			PatchClip.removeEventListener (MouseEvent.MOUSE_OVER, hiliteOn);			PatchClip.removeEventListener (MouseEvent.MOUSE_OUT, hiliteOff);			PatchClip.removeEventListener (MouseEvent.CLICK, clickPiece);			if (gameOver) GameManager.instance.gameFeedback ();		}		public function cleanUp ():void {			stopGame ();			TweenMax.killAll ();		}		public function solveGame ():void {			stopGame ();			for each (Patch in Patches) getNextPattern (Patch, true);		}		// ********* END IGame FUNCTIONS *********		// ********* START GAME FUNCTIONS *********		private static function hiliteOn (e:MouseEvent):void {			var inPiece:GlowFilter = new GlowFilter (0xFF0000, 1, 4, 4, 4, 4, false, false);			e.target.parent.filters = [inPiece];		}		private function hiliteOff (e:MouseEvent):void {			e.target.parent.filters = [outPiece];		}		private function clickPiece (e:MouseEvent):void {			var clickedPiece:MovieClip = e.target.parent;			getNextPattern (clickedPiece);			// CHECK GAME STATUS			for each (Patch in Patches) if (Patch.keys [Patch.index] != Patch.target) return;			// ALL PIECES MATCH			clickedPiece.filters = [];			TweenMax.to (PatchClip, .3, {rotation : -10, onComplete : startBounce });			stopGame (true);		}		private function startBounce ():void {			TweenMax.to (PatchClip, .3, {y : PatchClip.y - 15, yoyo : true, repeat : 11 });			TweenMax.to (PatchClip, .6, {rotation : 10, yoyo : true, repeat : 5, ease : Linear.easeNone, onComplete : stopBounce });		}		private function stopBounce ():void {			TweenMax.to (PatchClip, .3, {rotation : 0 });		}		private static function getNextPattern (ThisPatch:MovieClip, reset:Boolean = false):void {			while (ThisPatch.numChildren) ThisPatch.removeChildAt (0);			ThisPatch.index = (reset) ? ThisPatch.keys.indexOf (ThisPatch.target) : (++ThisPatch.index) % ThisPatch.keys.length;			var newPattern:MovieClip = MovieClip (new (getDefinitionByName ('pattern' + ThisPatch.keys [ThisPatch.index])));			ThisPatch.addChild (newPattern);			Center.it (ThisPatch, ThisPatch.mask);		}	}}