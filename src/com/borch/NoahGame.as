package com.borch {	import com.greensock.*;	import com.greensock.easing.*;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.utils.Dictionary;	public class NoahGame extends MovieClip implements IGame {		private const GAME_LENGTH:uint = 120;		private var GameClass:Class;		private const GAME_CLASSES:Array = [ Class (NoahEasy), Class (NoahHard) ];		private const PIECE_LEFT_CLASSES:Array = [ Class (L_0), Class (L_1), Class (L_2), Class (L_3), Class (L_4), Class (L_5), Class (L_6), Class (L_7), Class (L_8), Class (L_9), Class (L_10), Class (L_11), Class (L_12), Class (L_13), Class (L_14), Class (L_15), Class (L_16), Class (L_17), Class (L_18), Class (L_19), Class (L_20), Class (L_21), Class (L_22), Class (L_23) ];		private const PIECE_RIGHT_CLASSES:Array = [ Class (R_0), Class (R_1), Class (R_2), Class (R_3), Class (R_4), Class (R_5), Class (R_6), Class (R_7), Class (R_8), Class (R_9), Class (R_10), Class (R_11), Class (R_12), Class (R_13), Class (R_14), Class (R_15), Class (R_16), Class (R_17), Class (R_18), Class (R_19), Class (R_20), Class (R_21), Class (R_22), (R_23) ];		private var Holder:MovieClip;		private var infoText:String;		private var GoalLeft:MovieClip;		private var GoalRight:MovieClip;		private var TargetLeft:DisplayObject;		private var TargetRight:DisplayObject;		private var TargetClasses:Dictionary = new Dictionary (true);		private var TargetKeys:Dictionary = new Dictionary (true);		private var CurrentKeys:Array = [];		private var ArkAnimalsXoffset:int;		private const PAIRS_TOTAL:int = 24;		private const PAIRS_GAME:int = 7;		public function NoahGame () {			super ();		}		public function initGame (resource:Object = null):void {			Ark.startX = Ark.x;			Ark.startY = Ark.y;			Ark.Animals.scaleX = Ark.Animals.scaleY = .3;			ArkAnimalsXoffset = int ((Ark.Body.width - 50) / (7 * Ark.Animals.scaleX));		}		public function resetGame (option:Object = null):void {			if (GameClass == null) {				GameClass = (option != null) ? GAME_CLASSES [option] : GameClass = GAME_CLASSES [0];			}			Destroy.it (TargetLeft);			Destroy.it (TargetRight);			Destroy.it (Holder);			Holder = MovieClip (addChild (new GameClass));//			Holder.info.text = infoText;			TargetRight = addChild (new MovieClip);			TargetLeft = addChild (new MovieClip);			TargetClasses [TargetRight] = PIECE_RIGHT_CLASSES;			TargetClasses [TargetLeft] = PIECE_LEFT_CLASSES;			TargetRight.x = TargetLeft.x = Holder.TargetLoc.x;			TargetRight.y = TargetLeft.y = Holder.TargetLoc.y;			while (Ark.Animals.numChildren) Ark.Animals.removeChildAt (0);			TweenMax.killTweensOf (Ark);			TweenMax.killTweensOf (RiverClip);			RiverClip.y = 310;			Ark.x = Ark.startX;			Ark.y = Ark.startY;			Ark.rotation = 0;			CurrentKeys = Util.randArray (PAIRS_TOTAL).splice (-PAIRS_GAME);			getNewTargets ();			TargetRight.addEventListener (MouseEvent.MOUSE_DOWN, firstTime, false, 0, true);			TargetLeft.addEventListener (MouseEvent.MOUSE_DOWN, firstTime, false, 0, true);			stopGame ();			startGame ();		}		private function firstTime (e:MouseEvent = null):void {			TargetLeft.removeEventListener (MouseEvent.MOUSE_DOWN, firstTime);			TargetRight.removeEventListener (MouseEvent.MOUSE_DOWN, firstTime);			TweenMax.to (RiverClip, GAME_LENGTH, { y : 0, onComplete : stopGame, onCompleteParams:['timeout'], ease : Linear.easeNone });			GameManager.instance.gameStarted ();		}		public function startGame (firstTime:Boolean = false):void {			if (! TargetRight) resetGame();			TargetRight.addEventListener (MouseEvent.MOUSE_DOWN, getNewHalf, false, 0, true);			TargetLeft.addEventListener (MouseEvent.MOUSE_DOWN, getNewHalf, false, 0, true);			Util.asButton (TargetLeft);			Util.asButton (TargetRight);			TargetLeft.alpha = TargetRight.alpha = 1;					TweenMax.resumeAll ();		}		public function stopGame (gameOver:Object = false):void {			TargetLeft.removeEventListener (MouseEvent.MOUSE_DOWN, getNewHalf);			TargetRight.removeEventListener (MouseEvent.MOUSE_DOWN, getNewHalf);			Util.asButton (TargetLeft, false);			Util.asButton (TargetRight, false);			if (gameOver) {				TweenMax.killTweensOf (RiverClip);				TweenMax.to (RiverClip, 2, { y : 0, onComplete : floatArkAway });				Destroy.it (Holder);				GameManager.instance.gameFeedback (gameOver != 'timeout');			} else {				TweenMax.pauseAll ();			}		}		private function floatArkAway ():void {			TweenMax.to (Ark, 1, { rotation : -4, ease : Linear.easeNone, onComplete : driftAway });			function driftAway ():void {				TweenMax.to (Ark, 2, { rotation : 4, repeat : -1, yoyo : true, ease : Linear.easeNone });				TweenMax.to (Ark, 6, { x : -(Ark.getRect (stage).x + Ark.width), ease : Cubic.easeIn });			}		}		public function cleanUp ():void {			stopGame ();			TweenMax.killAll ();		}		// ********* END IGame FUNCTIONS *********		// ********* START GAME FUNCTIONS *********		// GET NEW PAIR TO MATCH		private function getNewTargets ():void {			Destroy.it (GoalLeft, 1);			Destroy.it (GoalRight, 1);			if (!CurrentKeys.length) {				Destroy.it (TargetLeft);				Destroy.it (TargetRight);				Destroy.it (GoalLeft);				Destroy.it (GoalRight);				stopGame (true);				return;			}			// UPDATE GOAL IF HARD			if (Holder.GoalLoc) {				GoalRight = MovieClip (addChild (new PIECE_RIGHT_CLASSES [CurrentKeys [0]]));				GoalLeft = MovieClip (addChild (new PIECE_LEFT_CLASSES [CurrentKeys [0]]));				GoalLeft.x = GoalRight.x = Holder.GoalLoc.x;				GoalLeft.y = GoalRight.y = Holder.GoalLoc.y;				GoalLeft.scaleX = GoalRight.scaleX = -.7;				GoalLeft.scaleY = GoalRight.scaleY = .7;				TweenMax.fromTo (GoalLeft, 1, { alpha : 0}, { alpha : 1 });				TweenMax.fromTo (GoalRight, 1, { alpha : 0}, { alpha : 1 });			}			TargetKeys [TargetRight] = Util.randArray (PAIRS_TOTAL, CurrentKeys [0]);			var notFirst:int = (GoalLeft) ? CurrentKeys [0] : TargetKeys [TargetRight][0];			TargetKeys [TargetLeft] = Util.randArray (PAIRS_TOTAL, notFirst);			TweenMax.fromTo (TargetRight, 1, { alpha : 0}, { alpha : 1, onComplete : Util.asButton, onCompleteParams : [TargetRight, true, 1] });			TweenMax.fromTo (TargetLeft, 1, { alpha : 0}, { alpha : 1, onComplete : Util.asButton, onCompleteParams : [TargetLeft, true, 1] });			getNewHalf (TargetRight);			getNewHalf (TargetLeft);		}		private function getNewHalf (Target:Object):void {			var clickOn:Boolean = Target is MouseEvent;			if (clickOn) Target = Target.currentTarget;			while (Target.numChildren) Target.removeChildAt (0);			if (clickOn) TargetKeys [Target].push (TargetKeys [Target].shift ());			Target.addChild (new TargetClasses [Target] [TargetKeys[Target][0]]);			// FIRST TIME			if (!clickOn) return;			//NO MATCH			if ((TargetKeys [TargetLeft][0] != TargetKeys [TargetRight][0]) || ((GoalLeft) && (TargetKeys [TargetRight][0] != CurrentKeys [0]))) return;			// MATCH!			Util.asButton (TargetLeft, false);			Util.asButton (TargetRight, false);			TargetLeft.alpha = TargetRight.alpha = 1;			TweenMax.delayedCall (2, addMatchToArk);		}		private function addMatchToArk ():void {			var NewPair:MovieClip = Ark.Animals.addChild (new MovieClip);			NewPair.addChild (new TargetClasses [TargetRight][TargetKeys [TargetLeft] [0]]);			NewPair.addChild (new TargetClasses [TargetLeft] [TargetKeys [TargetLeft] [0]]);			NewPair.addChild (new TargetClasses [TargetRight][TargetKeys [TargetLeft] [0]]);			NewPair.addChild (new TargetClasses [TargetLeft] [TargetKeys [TargetLeft] [0]]);			NewPair.getChildAt (2).x = NewPair.getChildAt (3).x = 120;			NewPair.x = (stage.stageWidth - NewPair.getBounds (stage).x) / Ark.Animals.scaleX;			TweenMax.to (NewPair, 1, { x:ArkAnimalsXoffset * Ark.Animals.numChildren });			CurrentKeys.shift ();			getNewTargets ();		}	}}