package com.borch {//  COMMIT 17 SEPT 14	import com.greensock.*;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.AccelerometerEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.geom.Point;	import flash.sensors.Accelerometer;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.Mouse;	import org.casalib.util.GeomUtil;	public class ArkGame extends MovieClip implements IGame {		private var Animal:MovieClip;		private var AnimalsFree:Array;		private var AnimalsAll:Array;		private var Staff:MovieClip;		private var Player:MovieClip;		private var Rope:MovieClip;		private var CaughtAnimal:MovieClip;		private var RemainsText:TextField;		private var centerPoint:Point;		private var accel:Accelerometer;		private var halfStageHeight:int;		private var halfStageWidth:int;		public function ArkGame () {			super ();		}		public function initGame (resource:Object = null):void {			halfStageHeight = stage.stageHeight / 2;			halfStageWidth = stage.stageWidth / 2;			RemainsText = new TextField ();			RemainsText.defaultTextFormat = new TextFormat ('_sans', 18, 0, true, false, false, null, null, 'right');			RemainsText.width = RemainsText.x = RemainsText.y = 60;			RemainsText.height = 28;			RemainsText.width = 150;			RemainsText.filters = [new GlowFilter (0xffffff, 1, 4, 4)];			addChild (RemainsText);			Util.asButton (RemainsText, false);			Player = Field.Movers.Player;			Rope = Field.Movers.addChildAt (new MovieClip, 0);			centerPoint = new Point (stage.stageWidth / 2, stage.stageHeight / 2);			Field.Movers.Crsr.visible = false;			if (Accelerometer.isSupported) {				accel = new Accelerometer ();				accel.setRequestedUpdateInterval (50);			}		}		public function resetGame (option:Object = null):void {			Player.x = Player.y = 0;			Field.x = centerPoint.x;			Field.y = centerPoint.y;			CaughtAnimal = null;			AnimalsFree = Util.childArray (Field.Movers);			AnimalsFree.splice (AnimalsFree.length - 2, 2);			AnimalsFree.shift ();			AnimalsAll = [];			for each (Animal in AnimalsFree) {				Animal.rotation = Math.random () * 360 - 180;				AnimalsAll.push (Animal);				do {					Animal.x = .95 * (Math.random () * Field.width - Field.width / 2);					Animal.y = .95 * (Math.random () * Field.height - Field.height / 2);					var newStageLoc:Point = Animal.parent.localToGlobal (new Point (Animal.x, Animal.y));				} while ((Field.Fence.hitTestPoint (newStageLoc.x, newStageLoc.y, true)) || (Player.hitTestObject (Animal)));			}			RemainsText.text = CBRXML.the().xml.gamesXref.ArkGame.animalsFree + ' ' + AnimalsFree.length;			stopGame ();			startGame (true);		}		public function startGame (firstTime:Boolean = false):void {			if (accel) accel.addEventListener (AccelerometerEvent.UPDATE, setAccelDirection, false, 0, true);			stage.addEventListener (MouseEvent.MOUSE_MOVE, setMouseDirection, false, 0, true);			Field.Movers.Crsr.visible = true;			Mouse.hide ();			if (firstTime) GameManager.instance.gameStarted ();			addEventListener (Event.ENTER_FRAME, updateGame, false, 0, true);			stage.addEventListener (MouseEvent.CLICK, sendStaff, false, 0, true);		}		public function stopGame (gameOver:Object = false):void {			removeEventListener (Event.ENTER_FRAME, updateGame);			stage.removeEventListener (MouseEvent.CLICK, sendStaff);			stage.removeEventListener (MouseEvent.MOUSE_MOVE, setMouseDirection);			if (accel) accel.removeEventListener (AccelerometerEvent.UPDATE, setAccelDirection);			Field.Movers.Crsr.visible = false;			Mouse.show ();			if (gameOver) GameManager.instance.gameFeedback ();		}		public function cleanUp ():void {			Mouse.show ();			accel = null;			stopGame ();			TweenMax.killAll ();		}		// ********* END IGame FUNCTIONS *********		// ********* START GAME FUNCTIONS *********		private function updateGame (e:Event):void {			// MOVE FIELD ACCORDING TO SPEED AND DIRECTION			moveAndTurnToward (Player, Field.Movers.Crsr);			// MOVE EACH FREE ANIMAL AWAY FROM PLAYER			for each (Animal in AnimalsFree) {				if (Animal.hitTestObject (Player.Repeller)) {					moveAndTurnToward (Animal, Player);				}			}			// STAFF WAS SENT OUT, CHECK FOR HIT			if (Staff) {				for each (Animal in AnimalsFree) {					if (Animal.hitTestObject (Staff.Target)) {						CaughtAnimal = AnimalsFree.splice (AnimalsFree.indexOf (Animal), 1)[0];						removeStaff ();						return;					}				}			} else if (CaughtAnimal) { // MOVE CAUGHT ANIMAL IF EXISTS				Rope.graphics.clear ();				if (CaughtAnimal.hitTestObject (Field.Ark)) {					// MOVE CAUGHT ANIMAL TO ARK					TweenMax.to (CaughtAnimal, 3, { x : Util.neg () * (20 + Math.random () * 40), y : Util.neg () * (20 + Math.random () * 40) });					CaughtAnimal = null;					RemainsText.text = CBRXML.the().xml.gamesXref.ArkGame.animalsFree + ' ' + AnimalsFree.length;					if (!AnimalsFree.length) stopGame (true);					stage.addEventListener (MouseEvent.CLICK, sendStaff, false, 0, true);				} else {					moveAndTurnToward (CaughtAnimal, Player);					Rope.graphics.lineStyle (3, 0x330000);					Rope.graphics.moveTo (Player.x, Player.y);					Rope.graphics.lineTo (CaughtAnimal.x, CaughtAnimal.y);				}			}		}		private function removeStaff (event:Event = null):void {			if (! Staff) return;			if (event) {				if (Staff.currentFrame < Staff.totalFrames) {					return;				} else {					stage.addEventListener (MouseEvent.CLICK, sendStaff, false, 0, true);				}			}			Staff.removeEventListener (Event.ENTER_FRAME, removeStaff);			Staff.parent.removeChild (Staff);			Staff = null;		}		private function moveAndTurnToward (Thing:DisplayObject, Target:DisplayObject):void {//			GET TARGET DIRECTION BETWEEN THING AND TARGET			var targetAngle:int = int (GeomUtil.angle (new Point (Thing.x, Thing.y), new Point (Target.x, Target.y)));			var moveDir:int = (Thing == Player) ? 1 : -1;			targetAngle -= (Thing == CaughtAnimal) ? 180 : 0;//			CALCULATE DIFFERENCE IN ANGLE BETWEEN WHERE THING IS FACING AND TARGET, TURN THING TOWARDS TARGET			var differenceAngle:int = int (Util.getClosestAngle (Thing.rotation, targetAngle));			if (Math.abs (targetAngle) > 5) Thing.rotation -= differenceAngle * .2;//			GET TARGET DISTANCE TO MOVE, MOVE FASTER IF FARTHER			var speedFactor:int = Math.round (Math.sqrt (Math.pow (Thing.x - Target.x, 2) + Math.pow (Thing.y - Target.y, 2)) / 20);			if (Thing == Player) Player.gotoAndStop (1 + Math.min (Math.ceil (speedFactor / 8), 2));			if (AnimalsFree.indexOf (Thing) != -1) speedFactor = Math.max (0, 16 - speedFactor);			var dirInRads:Number = Thing.rotation / 180 * Math.PI;			var newLocX:int = int (Thing.x + Math.cos (dirInRads) * speedFactor * moveDir);			var newLocY:int = int (Thing.y + Math.sin (dirInRads) * speedFactor * moveDir);//			DO NOT MOVE THING IF IT HITS FENCE OR ANIMALS			var newStageLoc:Point = Thing.parent.localToGlobal (new Point (newLocX, newLocY));			if (Field.Fence.hitTestPoint (newStageLoc.x, newStageLoc.y, true)) return;			for each (Animal in AnimalsAll) {				if (Thing == Animal) continue;				if (Animal.hitTestPoint (newStageLoc.x, newStageLoc.y, true)) return;			}			// MOVE THINGS AS APPROPRIATE			if (Thing == Player) {				Field.x -= newLocX - Thing.x;				Field.y -= newLocY - Thing.y;				Player.x = centerPoint.x - Field.x;				Player.y = centerPoint.y - Field.y;			} else {				Thing.x = newLocX;				Thing.y = newLocY;			}		}		private function setMouseDirection (event:MouseEvent):void {			Field.Movers.Crsr.x = Field.mouseX;			Field.Movers.Crsr.y = Field.mouseY;		}		private function setAccelDirection (event:AccelerometerEvent):void {			Field.Movers.Crsr.x = Player.x - Util.inRange (halfStageWidth * event.accelerationX * 2, -halfStageWidth, halfStageWidth);			Field.Movers.Crsr.y = Player.y + Util.inRange (halfStageHeight * event.accelerationY * 2, -halfStageHeight, halfStageHeight);		}		private function sendStaff (event:MouseEvent):void {			if (Staff) return;			stage.removeEventListener (MouseEvent.CLICK, sendStaff);			Staff = MovieClip (Player.addChildAt (new StaffSend, 1));			Staff.addEventListener (Event.ENTER_FRAME, removeStaff, false, 0, true);		}	}}/****************************** Game Player Field Animals Ark Fence Back ******************************/