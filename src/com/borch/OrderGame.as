package com.borch {	import com.greensock.*;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.geom.ColorTransform;	import flash.utils.Dictionary;	import flash.utils.getDefinitionByName;	public class OrderGame extends MovieClip implements IGame {		private var TokenTarget:Dictionary = new Dictionary (true);		private var TokensClip:MovieClip;		private var ActiveToken:MovieClip;		private var Token:MovieClip;		private var Tokens:Array = [];		var TokensClass:Class;		private var classes:Array = [ Class (Patriarchs), Class (Creation), Class (Plagues), Class (TargetClip8) ];		public function OrderGame () {			super ();		}		public function initGame (resource:Object = null):void {			TokensClass = (resource) ? getDefinitionByName (String (resource)) : classes[0];		}		public function resetGame (option:Object = null):void {			if (!TokensClip) {				TokensClip = addChild (new TokensClass);				var TargetsClip:MovieClip = addChild (new TargetClip8);//				var TargetsClip : MovieClip = addChild (new (getDefinitionByName ('TargetClip' + TokensClip.numChildren)));				Util.bringFront (TokensClip);				Tokens = Util.childArray (TokensClip);				for each (Token in Tokens) {					var tokenNum:int = Tokens.indexOf (Token);					TokenTarget [Token] = TargetsClip.getChildAt (tokenNum);					TokenTarget [Token].nbr.text = String (tokenNum + 1);				}			}			Tokens = Util.childArray (TokensClip);			TokensClip.filters = [];			for each (Token in Tokens) {				TweenMax.killTweensOf (TokenTarget [Token]);				TokenTarget [Token].transform.colorTransform = new ColorTransform ();				Token.alpha = 1;				Token.filters = [new GlowFilter (0x000000, 1, 24, 24, 2, 1)];				Token.x = ResetArea.x + Util.randomize (ResetArea.width);				Token.y = ResetArea.y + Util.randomize (ResetArea.height);			}			TokensClip.addEventListener (MouseEvent.MOUSE_DOWN, firstTime, false, 0, true);			stopGame ();			startGame ();		}		private function firstTime (e:MouseEvent):void {			e.target.removeEventListener (MouseEvent.MOUSE_DOWN, firstTime);			GameManager.instance.gameStarted ();		}		public function startGame (firstTime:Boolean = false):void {			for each (Token in Tokens) {				Util.asButton (Token, true, 1);				Token.addEventListener (MouseEvent.MOUSE_OVER, pieceHandler, false, 0, true);				Token.addEventListener (MouseEvent.MOUSE_OUT, pieceHandler, false, 0, true);				Token.addEventListener (MouseEvent.MOUSE_DOWN, pieceHandler, false, 0, true);				Token.addEventListener (MouseEvent.MOUSE_UP, pieceHandler, false, 0, true);			}		}		public function stopGame (gameOver:Object = false):void {			for each (Token in Tokens) {				Util.asButton (Token, false, 1);				Token.removeEventListener (MouseEvent.MOUSE_OVER, pieceHandler);				Token.removeEventListener (MouseEvent.MOUSE_OUT, pieceHandler);				Token.removeEventListener (MouseEvent.MOUSE_DOWN, pieceHandler);				Token.removeEventListener (MouseEvent.MOUSE_UP, pieceHandler);			}			if (gameOver) {				var ColorTokens:Array = Util.childArray (TokensClip);				for each (Token in ColorTokens) Util.cycleColor (TokenTarget [Token]);				GameManager.instance.gameFeedback ();			}		}		public function cleanUp ():void {			Util.childArray (TokensClip);			stopGame ();			TweenMax.killAll ();		}		public function solveGame ():void {			for each (Token in Tokens) resetPiece (Token);			stopGame ();			Tokens = [];		}		// ********* END IGame FUNCTIONS *********		// ********* START GAME FUNCTIONS *********		private function movePiece (m:MouseEvent):void {			ActiveToken.x = mouseX;			ActiveToken.y = mouseY;			m.updateAfterEvent ();		}		private function pieceHandler (e:MouseEvent):void {			var onGlow:GlowFilter = new GlowFilter (0xFF0000, 1, 24, 24, 2, 1);			switch (e.type) {				case 'mouseOver':					Util.bringFront (DisplayObject (e.target));					e.target.filters = [onGlow];					break;				case 'mouseOut':					e.target.filters = [];					break;				case 'mouseDown' :					ActiveToken = MovieClip (e.target);					stage.addEventListener (MouseEvent.MOUSE_MOVE, movePiece, false, 0, true);					break;				case 'mouseUp' :					stage.removeEventListener (MouseEvent.MOUSE_MOVE, movePiece);					testPieceLoc (e.target);			}		}		private function testPieceLoc (Token:MovieClip):void {			if (Token is Event) Token = Token.target;			// IGNORE IF NOT OVER TARGET			if (!Token.hitTestPoint (TokenTarget [ActiveToken].x, TokenTarget [ActiveToken].y, true)) return;			// IT'S A MATCH!			resetPiece ();			Tokens.splice (Tokens.indexOf (ActiveToken), 1);			if (Tokens.length == 0) stopGame (true);		}		private function resetPiece (ThisToken:MovieClip = null):void {			if (!ThisToken) {				ThisToken = ActiveToken;				ActiveToken = null;			}			Util.asButton (ThisToken, false);			Util.sendBack (ThisToken);			TweenMax.to (ThisToken, .3, { x : TokenTarget [ThisToken].x, y : TokenTarget [ThisToken].y, alpha : .7 });		}	}}